<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Lynskylate&#39;s Blog</title>
    <link>https://lynskylate.github.io/post/</link>
    <description>Recent content in Posts on Lynskylate&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright © 2019, lynskylate; all rights reserved.</copyright>
    <lastBuildDate>Sat, 06 Jul 2019 01:27:34 +0800</lastBuildDate>
    
	<atom:link href="https://lynskylate.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>StackTrace的实现</title>
      <link>https://lynskylate.github.io/post/stacktrace/</link>
      <pubDate>Sat, 06 Jul 2019 01:27:34 +0800</pubDate>
      
      <guid>https://lynskylate.github.io/post/stacktrace/</guid>
      <description>StackTrace的实现 简介 在python java这些语言中，一旦程序发生了异常，如下图，会打印异常发生时的调用栈，而在c/c++中如果需要实现类似的功能则要我们依靠libbacktrace之类的库去打印调用栈，
在c/c++中如何去实现一个类似libbacktrace这样的库来打印函数调用栈呢？本文将介绍一种naive的backtrace实现，讲解backtrace实现的原理。
追踪调用栈的基础-栈帧(stack frame) 栈帧(stack frame)保存着函数调用信息，如下图它存储于c内存布局中的栈区。
栈帧是实现backtrace的核心关键，它会存储着函数调用时的局部变量同时记录了函数调用的上下文如返回地址，其具体布局如下图。
ebp寄存器存储着栈基址指针，esp寄存器存储着当前栈顶指针，我们将ebp-esp之间的内存称为栈帧。
想要具体了解函数调用时，栈帧是如何变化的我们可以从汇编代码进行了解，我们将如下的代码进行反汇编
// file:naive.c int add(int a, int b){ return a + b; } int main(int argc, char* argv[]){ add(1,2); } // 反汇编命令 gcc -m32 -S -O0 -masm=intel naive.c  得到如下代码
_add: ## @add push ebp mov ebp, esp mov eax, dword ptr [ebp + 12] add eax, dword ptr [ebp + 8] pop ebp ret _main: ## @main push ebp mov ebp, esp sub esp, 24 # 预留栈空间存储局部变量 mov eax, dword ptr [ebp + 12] mov ecx, dword ptr [ebp + 8] mov dword ptr [esp], 1 # 设置局部变量1，2 mov dword ptr [esp + 4], 2 mov dword ptr [ebp - 4], eax ## 4-byte Spill mov dword ptr [ebp - 8], ecx ## 4-byte Spill call _add xor ecx, ecx mov dword ptr [ebp - 12], eax ## 4-byte Spill mov eax, ecx add esp, 24 pop ebp ret  在汇编中使用call _add时，它会将下一条地址推入栈中，并跳转至函数位置，即call _add相当于两条指令,push pc; jmp _add, 在使用call _add 指令后，此时栈顶(esp指向的地址)存储着xor ecx, ecx指令的地址。</description>
    </item>
    
    <item>
      <title>Envoy的线程模型[翻译]</title>
      <link>https://lynskylate.github.io/post/envoy_thread/</link>
      <pubDate>Wed, 09 Jan 2019 23:18:43 +0800</pubDate>
      
      <guid>https://lynskylate.github.io/post/envoy_thread/</guid>
      <description>Envoy threading Model 关于envoy 代码的底层文档相当稀少。为了解决这个问题我计划编写一系列文档来描述各个子系统的工作。由于是第一篇， 请让我知道你希望其他主题覆盖哪些内容。
一个我所了解到最共同的技术问题是关于envoy使用的线程模型的底层描述，这篇文章将会描述envoy如何使用线程来处理连接的(how envoy maps connections to threads)， 同事也会描述Thread Local Storage(TLS)系统是如何使内部代码平行且高效的。
Threading overview Figure 1: Threading overview
如同图一所示，envoy使用了三中不同类型的线程。
 Main: 这个线程管理了服务器本身的启动和终止, 所有xDS API的处理(包括DNS, 健康检查(health checking) 和通常的集群管理), running, 监控刷新(stat flushing), 管理界面 还有 通用的进程管理(signals, hot restart。在这个线程中发生的所有事情都是异步和非阻塞的(non blocking)。通常，主线程用来协调所有不需要大量cpu完成的关键功能。这允许大部分代码编写的如同单线程一样。
 Worker 在envoy系统中，默认为每个硬件(every harware)生成一个worker线程（可以通过&amp;ndash;concurrency参数控制),每个工作线程运行一个无阻塞的事件循环(event loop)，for listening on every listener (there is currently no listener sharding), accept 新的连接，为每个连接实例化过滤栈，以及处理这个连接生命周期的所有io。同时，也允许所有连接代码编写的如同单线程一样。
 File flusher Envoy 写入的每个文件现在都有一个单独的block的刷新线程。这是因为使用O_NONBLOCK在写入文件系统有时也会阻塞。当Worker线程需要写入文件时，这个数据实际上被移动至in-memory buffer中，最终会被File Flusher线程刷新至文件中。envoy的代码会在一个worker试图写入memory buffer时锁住所有worker。还有一些其他的会在下面讨论。
  连接处理 如上所述， 所有worker线程都会监听端口而没有任何分片，因此，内核智能的分配accept的套接字给worker进程。现代内核一般都很擅长这一点，在开始使用其他监听同一套接字的其他线程之前，内核使用io 优先级提升等特性来分配线程的工作，同样的还有不适用spin-lock来如理所有请求。</description>
    </item>
    
  </channel>
</rss>